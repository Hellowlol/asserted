def test_multiex():
    ex = asserted.example_class.Ex()
    assert ex.att1 == "att1"
    assert ex.data == "data"
    assert str(ex.is_datetime.date()) == "1970-01-01"
    assert sorted(ex.is_dict.items()) == [('a', 'a'), ('b', 'b')]
    assert ex.is_false is False
    assert ex.is_float == 0.5
    assert sorted(list(ex.is_generator_expression)) == [0, 1]
    assert ex.is_int == 1
    assert sorted(ex.is_list) == [1, 2, 3, 4, 5]
    assert ex.is_true is True
    assert sorted(ex.is_tuple) == [1, 2, 3]
    assert ex.props == "props"

def test_multia_classmethod():
    ex = asserted.example_class.Ex()
    assert ex.a_classmethod() == "a_classmethod"

def test_multia_coro_with_return():
    ex = asserted.example_class.Ex()

    async def gogo():
        a_coro_with_return = await ex.a_coro_with_return()
        assert a_coro_with_return == "a_coro_with_return"
    asyncio.get_event_loop().run_until_complete(gogo())

def test_multia_generator_function():
    ex = asserted.example_class.Ex()
    assert sorted(list(ex.a_generator_function())) == [0, 1, 2]

def test_multia_staticmethod():
    ex = asserted.example_class.Ex()
    assert ex.a_staticmethod() == "a_staticmethod"

def test_multiasync_metod():
    ex = asserted.example_class.Ex()

    async def gogo():
        async_metod = await ex.async_metod()
        assert async_metod == "async_metod"
    asyncio.get_event_loop().run_until_complete(gogo())

def test_multiasync_metod_two():
    ex = asserted.example_class.Ex()

    async def gogo():
        async_metod_two = await ex.async_metod_two()
        assert async_metod_two == "async_metod_two"
    asyncio.get_event_loop().run_until_complete(gogo())

def test_multimethod():
    ex = asserted.example_class.Ex()
    assert ex.method() == "method"

def test_multimissing_a_arg():
    ex = asserted.example_class.Ex()
    assert ex.missing_a_arg() == "Missing_ARG"

